
rules_version = '2';

// Helper function to check if a map contains only specific allowed keys.
// Not used in the simplified rules below but can be useful for more complex validation.
// function hasOnlyAllowedKeys(map, allowedKeys) {
//   return map.keys().removeAll(allowedKeys).size() == 0;
// }

service cloud.firestore {
  match /databases/{database}/documents {

    // InstaBharat Users collection (typically /users/{userId})
    // These are the rules for YOUR EXISTING InstaBharat app.
    // BharatConnect only needs to READ the current user's own document from here.
    // Replace this placeholder with your actual, working InstaBharat rules for the /users collection.
    match /users/{userId} {
      // For BharatConnect to read the current user's InstaBharat profile:
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // IMPORTANT: BharatConnect should NOT write to /users/{userId}.
      // InstaBharat app manages its own writes to this collection.
      // So, no 'allow write', 'allow create', or 'allow update' here
      // intended for BharatConnect's direct use.
      // Your full InstaBharat rules for create/update/delete by InstaBharat app itself go here.
      // Example (very basic, replace with your actual InstaBharat rules):
      // allow write: if request.auth != null && request.auth.uid == userId; // If InstaBharat app allows user to write their own doc.
    }

    // BharatConnect User Shadow Profiles - minimal identity copy
    // Collection: /bharatConnectUserShadows/{userId}
    match /bharatConnectUserShadows/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow create and update (merge:true) if it's the user's own document
      // and specific fields are being set/updated.
      allow write: if request.auth != null && request.auth.uid == userId &&
                      request.resource.data.uid == userId &&
                      request.resource.data.updatedAt == request.time &&
                      // Validate keys being written. Can be specific for create vs update if needed.
                      request.resource.data.keys().hasAll(['uid', 'name', 'profileImageUrl', 'username', 'updatedAt']) &&
                      request.resource.data.keys().size() == 5; // Exact number of keys
    }

    // BharatConnect Full User Data
    // Collection: /bharatConnectUsers/{userId}
    match /bharatConnectUsers/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.id == userId &&
                       request.resource.data.email == request.auth.token.email && // Verify email against auth token
                       request.resource.data.onboardingComplete == true &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       // Ensure only allowed fields are present on create
                       request.resource.data.keys().hasOnly([
                         'id', 'name', 'email', 'username', 'phone', 'photoURL',
                         'bio', 'currentAuraId', 'onboardingComplete',
                         'createdAt', 'updatedAt'
                       ]);
                       
      allow update: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.id == userId && // ID cannot change
                       request.resource.data.email == resource.data.email && // Email cannot be changed via this update
                       request.resource.data.username == resource.data.username && // Username cannot be changed via this update
                       request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot change
                       request.resource.data.onboardingComplete == resource.data.onboardingComplete && // onboardingComplete state should be managed carefully
                       request.resource.data.updatedAt == request.time &&
                       // Allow only specific fields to be updated after creation
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'name', 'phone', 'photoURL', 'bio', 'currentAuraId', 'updatedAt'
                         // 'onboardingComplete' could be part of a different update rule if needed
                       ]);
      // Delete is typically handled via Admin SDK or Cloud Functions for user data.
      // allow delete: if request.auth != null && request.auth.uid == userId; // If direct deletion is allowed
    }
  }
}
