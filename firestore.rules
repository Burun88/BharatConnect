rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile, but only read others' public profiles.
    match /bharatConnectUsers/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Users can read/write their own subcollections for requests
    match /bharatConnectUsers/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Chats: Participants can read/write
    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
    }
    
    // Messages: Participants can read/write
    match /chats/{chatId}/messages/{messageId} {
       allow read, write: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
    }
    
    // Auras: Users can manage their own aura
    match /auras/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Status: Users manage their own, others can read
    match /status/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Calls: Only participants can read/write
    match /calls/{callId} {
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);
    }
    
    // Request Cooldowns: Only the sender can create
    match /requestCooldowns/{cooldownId} {
        allow read;
        allow create: if request.auth != null && request.auth.uid == cooldownId.split('_')[0];
    }
  }
}
