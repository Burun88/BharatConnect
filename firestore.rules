rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Profiles & Data ---
    match /bharatConnectUsers/{userId} {
      // Any authenticated user can read any profile (for searching, viewing profiles)
      allow read: if isAuthenticated();
      // Only the owner can create or update their own profile
      allow create, update: if isOwner(userId);
      // Disallow deletion of user profiles for now
      allow delete: if false;
    }

    // --- User Key Vaults & Backups ---
    match /userKeyVaults/{userId} {
        // A user can create and update their own key vault
        allow create, update: if isOwner(userId);
        // Any authenticated user can read any key vault to get public keys for encryption
        allow read: if isAuthenticated();
        // Disallow deletion for now
        allow delete: if false;
    }

    match /userBackups/{userId} {
        // Only the owner can create, read, update, or delete their own encrypted backup
        allow read, write: if isOwner(userId);
    }
    
    // --- User Request Cooldowns ---
    match /requestCooldowns/{cooldownId} {
        function senderId() {
            return cooldownId.split('_')[0];
        }
        // Only the sender can create the cooldown document
        allow create: if isOwner(senderId());
        // Any authenticated user can read to check if a cooldown exists
        allow read: if isAuthenticated();
        allow update, delete: if false;
    }


    // --- User-specific subcollections for connection requests ---
    match /bharatConnectUsers/{userId}/requestsSent/{targetId} {
      // The sender can manage their sent requests
      allow read, write: if isOwner(userId);
    }
    match /bharatConnectUsers/{userId}/requestsReceived/{senderId} {
       // The recipient can manage their received requests
       allow read, update, delete: if isOwner(userId);
       // Allow creation as part of a batch write by either party
       allow create: if isOwner(userId) || isOwner(senderId);
    }


    // --- Chats ---
    match /chats/{chatId} {
      // A user can read/write to a chat if they are a participant
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read all messages
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        // Only a participant can create a message, and they must be the sender or system
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) && (request.resource.data.senderId == request.auth.uid || request.resource.data.senderId == 'system');
        // Allow updating messages, e.g. for read receipts
        allow update: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow delete: if false;
      }
    }

    // --- Calls ---
    match /calls/{callId} {
      // Caller or Callee can create, read, and update the call document
      allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);

      // ICE candidates subcollections
      match /{role}Candidates/{candidateId} {
        // Caller or callee can add ICE candidates. role is 'caller' or 'callee'.
        allow create: if isAuthenticated() && (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId || request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId);
        allow read, update, delete: if false;
      }
    }
    
    // --- Status ---
    match /status/{userId} {
        allow create, update, delete: if isOwner(userId);
        // Any authenticated user can read anyone's status.
        allow read: if isAuthenticated();
    }
  }
}
