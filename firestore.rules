
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow logged-in users to read and write to their own user document.
    match /bharatConnectUsers/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // Allow users to read/write to chats they are a part of.
    match /chats/{chatId} {
      allow read, write: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
    }
    
    // Allow users to write messages to chats they are a part of.
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
    }

    // Allow users to manage their own chat requests
    match /bharatConnectUsers/{userId}/requestsSent/{requestId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    match /bharatConnectUsers/{userId}/requestsReceived/{requestId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow read access to auras for any authenticated user
    match /auras/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow read access to status for any authenticated user
    match /status/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to manage their own calls
    match /calls/{callId} {
      allow read, write: if request.auth != null; // Simplified for now
    }
     match /calls/{callId}/{subcollection}/{candidateId} {
      allow create: if request.auth != null;
    }

    // Allow users to manage their request cooldowns
    match /requestCooldowns/{cooldownId} {
        allow read, write: if request.auth != null;
    }
  }
}
