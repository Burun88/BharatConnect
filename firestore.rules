rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for clarity and reuse
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // bharatConnectUsers collection
    match /bharatConnectUsers/{userId} {
      // Any authenticated user can read a profile (to see contact info)
      allow read: if isAuth();
      // Only the owner can write to their own profile
      allow write: if isOwner(userId);

      // Rules for subcollections of a user
      match /requestsSent/{docId} {
        // Only the owner can read/write their sent requests
        allow read, write: if isOwner(userId);
      }
      match /requestsReceived/{docId} {
        // Only the owner can read/write their received requests
        allow read, write: if isOwner(userId);
      }
    }
    
    // auras collection
    match /auras/{auraId} {
      // Any authenticated user can read an aura document.
      // This is necessary for the homepage aura bar query to work.
      allow read: if isAuth();
      // Only the owner can create/update their own aura.
      allow write: if isOwner(auraId);
    }
    
    // chats collection
    match /chats/{chatId} {
      // A user can read/write a chat document if their UID is in the participants list.
      allow read, write: if isAuth() && request.auth.uid in resource.data.participants;
      
      // messages subcollection
      match /messages/{messageId} {
        // A user can read/write messages if they are a participant of the parent chat doc.
        // This requires a 'get' call to the parent document.
         allow read, write: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // status collection
    match /status/{userId} {
      // Any authenticated user can read status updates.
      // A more complex rule could limit this to contacts only.
      allow read: if isAuth();
      // Only the owner can write their own status.
      allow write: if isOwner(userId);
    }

    // calls collection
    match /calls/{callId} {
      // The caller or callee can read/write the call document.
      allow read, write: if isAuth() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);
      
      // ICE candidates subcollections
      match /{candidatesCollection=**}/{candidateId} {
        // Allow creating candidates if user is part of the call.
        allow create: if isAuth() && (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId || request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId);
      }
    }
    
    // requestCooldowns collection
    match /requestCooldowns/{cooldownId} {
        // The sender who initiated the cooldown can read/create it.
        // cooldownId is formatted as "senderId_receiverId".
        allow read, create: if isAuth() && request.auth.uid == cooldownId.split('_')[0];
    }
  }
}
